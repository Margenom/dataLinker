Knowlege Base System
Примерный цикл работы с системой
	- создаем фаил ознакомления с ресурсом - не являеться частью системы
	- разбиваем его на заметки в разные файлы (именуем их)
	- связываем первичными отношениями эти заметки, помещая их в систему
	- размещаем ссылки в структуре
	- накидываем дополнительные отношения если надо
	- пользуемся или радуемся

Недостатки же 
	- скрипты и массовое добавление занисей онасно для записей
	- много возни, но при имспользовании бумажных карточек возни больше

Так и чего мне надо для этой системы
	- главный атом это заметка
		- одна заметка = одна идея
		- имя
	- связи с остальными заметками
	- система должна иметь структуру

Как это делать
- хранить в файловой древовидной структуре
#	- заметки храняться в папках по датам
#		- для того чтобы иметь привязку к дате
#		- длительность настраиваеться (<last name> - now > <per>) -> make new dir
	- заметки
		- название utime 
		- просто текстовые файлы 
	- структура определяеться с помощью ссылок 
		- раздел - папка
		- значение - ссылка
			- название файла - utime
			- название ссылки - описание 
		- может и должно содержать обычные файлы
			- 
	- отношения - через фаил на prolog 
		- задаються через уневерсальный указатель ресурса в системе 
			- заметка её дата и часть пути от корня
			- фаил имя и аналогисно
		- типы связей задаёт пользователь
	- категории - отношения одноранговые 

Структура католога
/		- системный корень
/.res/		- ресурсы загруженные пользователем (можно все файлы сделать как замеки)
/.mark/		- заметоки (думаю что можно вообще от них (дополнительных каталогах) отказаться)
Моно все файлы хранить в одном месте и при добавлении просто выполнять следующее
	- фаил с именем <name.ext> перемещять в каталог .res
	- переименовать его в <uname>
	- cоздать ссылку на <uname> с именем <name.ext> в том месте где был фаил или в корне
/.def.pl	- отношения и категории
/.def.d		- возможно понадобиться в будущем
всё остальное	- структура состоит из
	- ссылок на res - ресурсы что обозначены в системе
	- ссылок на заметки - главный способ обращения к заметкам
	- каталогов - определяющих место чего либо в структуре
	- ссылок на каталоги - для быстрого доступа пользователя (система их игнорирует)
	- простые файлы (не ссылки и не катологи) - какието пользовательские файлы (система их игнорирует)
		- могут быть например дополнительные файлы для markdown: картинки код примеры результаты
	- ссылок кудато (вне папок .res и .mark) - пользовательские ссылки (игнорируються)

Зачем это всё - для возможности сохронить отношения в системе при изменении структуры
Например я прочел статью и вычлянил из неё несколько заметок и связал их что они из одной статьи,
потом я разделил их по разным категориям и нишел какоето применение одной из них 
и захочу детальней понять о чем собственно она или по подробнее узнать я таким образом могу найти 
и связанные с ней заметки и саму статью, но вдобавок к этому по мере того как заметка гуляет по структуре
она обрастает новыми связями что очень полезно

Как создовать заметки
	- создает запись в хранилище и ссылку с именем name
cd a/b/.../
kbs here <path> - запускает эдитор
1kbs safe <file> - сохраняет в системе фаил
	- востановить фаил из базы
kbs restore <link> - востанавлевает и удаляет
2kbs clone <link>
3kbs del <link> - удаляеть из системы
	- копировать и перенести запись по структуре
cp
mv
	- востановить ссылку тк ссылка имеет абсолютный путь на фаил при переносе его она ломаеться
4kbs relink <link name>
	- связать фаил с заметкой - поместить его в один католог с оной
	- создать отношение с файлом (a,b: link or file)
5kbs rel -<name0> [.. -<nameN>] a [b]
kbs deep a b 	-> like kbs rel -deep a b
kbs cons a b 	--
kbs part a b 	<-
	- посмотреть схему отношений
6kbs about <link> - посмотреть отношения этого обьекта
kbs trace
	- посмотреть структурную схему (как tree)
7kbs tree [<root>]
	- запустить repl prolog
0kbs repl
